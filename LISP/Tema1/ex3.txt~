(defun counter (l elem &optional(n 0))
  (cond 
   ((null l) n)
   ((equal (car l) elem) (counter (cdr l) elem (+ n 1)))
   (t (counter (cdr l) elem n))))

(defun eliminateDuplicates (l)
  (cond ((null l) nil)
        ((member (car l) (cdr l))
         (eliminateDuplicates (cdr l)))
        (t (cons (car l) (eliminateDuplicates (cdr l))))))

(defun resolve (l1 l2)
  (if (not (equal '() l2))
      (progn
        (setq res (cons (car l2) (cons (counter l1 (car l2)) '())))
        (print res)
        (resolve l1 (cdr l2)))))

(defun main (list)
  (resolve list (eliminateDuplicates list))
)
