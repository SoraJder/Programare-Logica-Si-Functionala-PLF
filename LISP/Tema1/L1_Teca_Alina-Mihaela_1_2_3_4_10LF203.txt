;;;;Teca Alina-Mihaela - 10LF203

;;;;1.Scrieti o functie care sa returneze al n-lea element dintr-o lista liniara
;;;; sau nil in cazul in care nu exista niciun element in lista. 

;;;Model Matematic : 
;;;; nth_element(l1..ln,pos,n)
;;;; [], daca [] sau n > (length l1..ln)
;;;; l1, daca pos=n
;;;; nth_element (l2..ln, pos++,n)

;;;;Cazuri testare:
;;;;(nth_element '(1 2 3 4 5 6) '1 '3) -> 3
;;;;(nth_element '(1 2 3 4 5 6) '1 '8) -> nil
;;;;(nth_element '() '1 '8) -> nil

(defun nth_element (list pos n)
(cond
((null list) nil)
((> n (length list)) nil)
((equal pos n) (car list))
((nth_element (cdr list)(+ pos 1 ) n))))


;;;;2.Scrieti o functie care sa verifice daca elementul E face parte dintr-o lista,
;;;; care nu este neaparat liniara. 

;;;;Model matematic
;;;;check_element (l1..ln, val)
;;;; [], daca []
;;;; check_element(l2..ln,val)
;;;; check_element(l1 , val), daca (listp l1)
;;;;true, daca l1 = val

;;;;Cazuri testare
;;;;(check_element '(1 ((2 3) 4)(5 6) 7) 6 )
;;;;(check_element '(1 ((2 3) 4)(5 6) 7) 0 )
;;;;(check_element '(1 ((2 3) 4)(5 6) 7) 7 )

(defun check_element (list val)
  (cond
   ((null list) nil)
   ((check_element (cdr list) val))
   ((listp (car list)) (check_element (car list) val))
   (t (equal (car list) val))))


;;;;3.Scrieti o functie care transforma o lista liniara intr-una de forma:
;;;; [(element, numar_de_aparitii_element)].

;;;;Exemplu: (A B A B A C A) --> ((A 4) (B 2) (C 1)) 

;;;;Model matematic

;;;; n=0
;;;; counter(l elem n)
;;;;n, daca []
;;;;counter(l2..ln elem n++), daca l1=elem
;;;;counter( l2..ln elem n) altfel

;;;;eliminateDuplicates (n)
;;;;[], daca []
;;;;eliminateDuplicates(l2..ln), daca member(l1 l2..ln)
;;;;l1 reunit eliminateDuplicates(l2..ln), altfel

;;;;resolve (l1..ln k1..kn)
;;;;[], daca k1..kn=[]
;;;;{ res = (k1 (counter l1..ln k1 0))}, print res, resolve(l1..ln, k2..kn)} altfel

;;;;Cazuri testare
;;;;(main3 '(1 2 3 4 5 2 2 1))
;;;;(main3 '(2 0 5 4 1 1 3 5 5))
;;;;(main3 '(1 2 3 4 5))

(defun counter (l elem n)
  (cond 
   ((null l) n)
   ((equal (car l) elem) (counter (cdr l) elem (+ n 1)))
   (t (counter (cdr l) elem n))))

(defun eliminateDuplicates (l)
  (cond ((null l) nil)
        ((member (car l) (cdr l))
         (eliminateDuplicates (cdr l)))
        (t (cons (car l) (eliminateDuplicates (cdr l))))))

(defun resolve (l1 l2)
  (if (not (equal '() l2))
      (progn
        (setq res (cons (car l2) (cons (counter l1 (car l2) 0) '())))
        (print res)
        (resolve l1 (cdr l2)))))

(defun main3 (list)
  (resolve list (eliminateDuplicates list))
)

;;;;4.Scrieti o functie care sa returneze toate sublistele unei liste neliniare. 
;;;;O sublista reprezinta fie lista originala sau orice alt element al acelei liste

;;;;Cazuri testare
;;;;(main4 '(1 2 (3 (4 5)(6 7)) 8 (9 10)))


;;;;Model matematic
;;;;resolve_ex4 (l1..ln)
;;;;[], daca []
;;;; {(print l1) resolve_ex4(l1) resolve_ex4(l2..ln)}, daca (l1 listp)
;;;; resolve_ex4(l2..ln), alfel

(defun resolve_ex4(list)
  (cond 
   ((null list) nil)
   ((listp (car list))(print (car list))(resolve_ex4 (car list)) (resolve_ex4(cdr list)))
   (t(atom (car list)) (resolve_ex4 (cdr list)))))

(defun main4 (list)
 (print list)
 (resolve_ex4 list))

